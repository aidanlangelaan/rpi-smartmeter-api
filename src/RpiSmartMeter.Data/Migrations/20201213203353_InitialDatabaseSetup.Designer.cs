// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RpiSmartMeter.Data;

namespace RpiSmartMeter.Data.Migrations
{
    [DbContext(typeof(SmartMeterDbContext))]
    [Migration("20201213203353_InitialDatabaseSetup")]
    partial class InitialDatabaseSetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RpiSmartMeter.Data.Entities.Meter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnAt")
                        .HasColumnType("datetime2(7)");

                    b.Property<double>("DsmrVersion")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("timestamp");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedOnAt")
                        .HasColumnType("datetime2(7)");

                    b.HasKey("Id");

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("RpiSmartMeter.Data.Entities.PowerFailure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnAt")
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("DurationInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("UpdatedOnAt")
                        .HasColumnType("datetime2(7)");

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.ToTable("PowerFailures");
                });

            modelBuilder.Entity("RpiSmartMeter.Data.Entities.Telegram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ActLowerBackdeliveryL1Kw")
                        .HasColumnType("float");

                    b.Property<double>("ActLowerL1Kw")
                        .HasColumnType("float");

                    b.Property<double>("ActualBackdeliveryKw")
                        .HasColumnType("float");

                    b.Property<double>("ActualDeliveryKw")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedOnAt")
                        .HasColumnType("datetime2(7)");

                    b.Property<double>("CurrentL1A")
                        .HasColumnType("float");

                    b.Property<byte>("Mbus1DeviceType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Mbus1MeterId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Mbus1Value")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<int>("NrPowerfailures")
                        .HasColumnType("int");

                    b.Property<int>("NrPowerfailuresLong")
                        .HasColumnType("int");

                    b.Property<int>("NrVoltageSagsL1")
                        .HasColumnType("int");

                    b.Property<int>("NrVoltageSwellsL1")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("timestamp");

                    b.Property<byte>("TariffIndicator")
                        .HasColumnType("tinyint");

                    b.Property<string>("TextMessage")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2(7)");

                    b.Property<double>("TotalBackdeliveryHighKwh")
                        .HasColumnType("float");

                    b.Property<double>("TotalBackdeliveryLowKwh")
                        .HasColumnType("float");

                    b.Property<double>("TotalDeliveryHighKwh")
                        .HasColumnType("float");

                    b.Property<double>("TotalDeliveryLowKwh")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedOnAt")
                        .HasColumnType("datetime2(7)");

                    b.Property<double>("VoltageL1V")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.ToTable("Telegrams");
                });

            modelBuilder.Entity("RpiSmartMeter.Data.Entities.PowerFailure", b =>
                {
                    b.HasOne("RpiSmartMeter.Data.Entities.Meter", "Meter")
                        .WithMany("PowerFailures")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RpiSmartMeter.Data.Entities.Telegram", b =>
                {
                    b.HasOne("RpiSmartMeter.Data.Entities.Meter", "Meter")
                        .WithMany("Telegrams")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
